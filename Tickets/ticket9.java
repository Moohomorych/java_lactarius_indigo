/*
Напишите метод removeDuplicates, который можно добавить в класс LinkedIntList. Метод должен удалить любые дубликаты из связанного списка целых чисел. Результирующий список должен иметь значения в том же относительном порядке, что и их первое вхождение в исходном списке. Другими словами, значение і должно появляться перед значением j в окончательном списке тогда и только тогда, когда первое вхождение і появилось до первого появления j в исходном списке. Например, если переменная с именем list хранит следующий список: [14, 8, 14, 12, 1, 14, 11, 8, 8, 10, 4, 9, 1, 2, 5, 2, 4, 12, 12]
После вызова list. removeDuplicates (); список должен хранить эти значения в таком виде: [14, 8, 12, 1, 11, 10, 4, 9, 2, 5]
Предположим, что мы добавляем этот метод в класс LinkedIntList, как показано ниже. Вы не можете вызывать какие-либо другие методы класса для решения этойзадачи, вы не можете создавать новые узлы и не можете использовать какие-либо вспомогательные структуры данных для решения этой проблемы (например, массив, ArrayList, Queue, String и т. д.). Вы также не можете изменять какие-либо поля данных узлов. Вы должны решить этузадачу, переставив ссылки в списке.
public class LinkedIntList {
    private ListNode front;
    ...
  }
  public class ListNode {
    public int data;
    public ListNode next;
    ...
  }
*/

/**
 * Метод, который удаляет любые дубликаты из связанного списка целых чисел.
 * Результирующий список сохраняет порядок первого вхождения каждого значения.
 */
public void removeDuplicates() {
    if (front == null) {
        // Если список пуст, ничего не делаем
        return;
    }
    ListNode current = front;
    while (current != null) {
        // Проверяем, есть ли следующий узел и его значение совпадает с текущим
        while (current.next != null && current.data == current.next.data) {
            // Пропускаем все повторяющиеся узлы
            current.next = current.next.next;
        }
        current = current.next;
    }
}
