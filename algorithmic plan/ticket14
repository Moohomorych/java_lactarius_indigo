Напишите метод equals, который принимает в качестве параметров два стека целых чисел, метод возвращает true, если два стека равны, и в противном случае возвращает false. Чтобы считаться равными, два стека должны хранить одинаковую последовательность целочисленных значений в одном и том же порядке. Ваш метод заключается в проверке двух стеков, но перед завершением работы метода необходимо вернуть их в исходное состояние. Вы можете использовать один стек в качестве вспомогательногохранения.

Алгоритмический план для метода `equals` и связанных методов:

1. **Метод `equals`**:
   - Проверить размер стеков (`stack1` и `stack2`). Если размеры не равны, вызвать метод `restoreStacks` и вернуть `false`.
   - Создать вспомогательный стек `tempStack`.
   - Итеративно извлекать элементы из обоих стеков (`stack1` и `stack2`).
     -- Если элементы не равны, вызвать метод `restoreStacks` и вернуть `false`.
     -- Помещать элементы в `tempStack`.
   - Вызвать метод `restoreStacks` с передачей `stack1`, `stack2` и `tempStack`.
   - Вернуть `true`, так как стеки равны.
2. **Метод `restoreStacks`** (восстановление стеков):
   - Итеративно извлекать элементы из стеков и игнорировать их.
3. **Метод `restoreStacks` с использованием вспомогательного стека**:
   - Итеративно извлекать элементы из `tempStack` и помещать их обратно в `stack1` и `stack2`.
4. **Метод `main`**:
   - Создать два стека (`stack1` и `stack2`).
   - Добавить несколько элементов в каждый стек.
   - Вызвать метод `equals` с передачей `stack1` и `stack2`.
   - Вывести результат сравнения на экран.
